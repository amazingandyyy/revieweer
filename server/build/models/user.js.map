{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","Schema","name","first","type","String","validate","validator","length","message","required","last","email","unique","lowercase","emailVerified","Boolean","default","password","phone","number","verified","timestamps","pre","next","user","genSalt","error","salt","hash","err","crypt","methods","comparedPassword","p","cb","compare","good","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA,IAAMA,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACnCC,UAAM;AACFC,eAAO;AACLC,kBAAMC,MADD;AAELC,sBAAU;AACRC,2BAAW,mBAAUL,IAAV,EAAgB;AACzB,2BAAOA,KAAKM,MAAL,GAAc,CAArB;AACD,iBAHO;AAIRC,yBAAS;AAJD,aAFL;AAQLC,sBAAU,CAAC,IAAD,EAAO,yBAAP;AARL,SADL;AAWFC,cAAM;AACJP,kBAAMC,MADF;AAEJC,sBAAU;AACRC,2BAAW,mBAAUL,IAAV,EAAgB;AACzB,2BAAOA,KAAKM,MAAL,GAAc,CAArB;AACD,iBAHO;AAIRC,yBAAS;AAJD;AAFN;AAXJ,KAD6B;AAsBnCG,WAAO;AACHR,cAAMC,MADH;AAEHQ,gBAAQ,IAFL;AAGHH,kBAAU,CACN,IADM,EACA,oBADA,CAHP;AAMHI,mBAAW;AANR,KAtB4B;AA8BnCC,mBAAe;AACXX,cAAMY,OADK;AAEXC,iBAAS;AAFE,KA9BoB;AAkCnCC,cAAUb,MAlCyB;AAmCnCc,WAAO;AACHC,gBAAQ;AACJhB,kBAAMC;AADF,SADL;AAIHgB,kBAAU;AACNjB,kBAAMY,OADA;AAENC,qBAAS;AAFH;AAJP;AAnC4B,CAApB,EA4ChB;AACCK,gBAAY;AADb,CA5CgB,CAAnB;;AAgDAtB,WAAWuB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAe;AAClC,QAAMC,OAAO,IAAb;AACA,2BAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,KAAD,EAAQC,IAAR,EAAiB;AAChC,YAAID,KAAJ,EAAW,OAAOH,KAAKG,KAAL,CAAP;AACX,+BAAOE,IAAP,CAAYJ,KAAKP,QAAjB,EAA2BU,IAA3B,EAAiC,IAAjC,EAAuC,UAACE,GAAD,EAAMC,KAAN,EAAgB;AACnD,gBAAID,GAAJ,EAAS,OAAON,KAAKM,GAAL,CAAP;AACTL,iBAAKP,QAAL,GAAgBa,KAAhB;AACAP;AACH,SAJD;AAKH,KAPD;AAQH,CAVD;;AAYA;AACAxB,WAAWgC,OAAX,CAAmBC,gBAAnB,GAAsC,UAASC,CAAT,EAAYC,EAAZ,EAAe;AACjD,2BAAOC,OAAP,CAAeF,CAAf,EAAkB,KAAKhB,QAAvB,EAAiC,UAACY,GAAD,EAAMO,IAAN,EAAe;AAC5CP,cAAIK,GAAGL,GAAH,CAAJ,GAAYK,GAAG,IAAH,EAASE,IAAT,CAAZ;AACH,KAFD;AAGH,CAJD;;AAMA;kBACe,mBAASC,KAAT,CAAe,MAAf,EAAuBtC,UAAvB,C","file":"user.js","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt-nodejs';\n\n// Define the model\nconst userSchema = new mongoose.Schema({\n    name: {\n        first: {\n          type: String,\n          validate: {\n            validator: function (name) {\n              return name.length > 2;\n            },\n            message: 'Name must be longer than 2 characters.'\n          },\n          required: [true, 'first name is required.']\n        },\n        last: {\n          type: String,\n          validate: {\n            validator: function (name) {\n              return name.length > 2;\n            },\n            message: 'Name must be longer than 2 characters.'\n          }\n        }\n      },\n    email: {\n        type: String,\n        unique: true,\n        required: [\n            true, 'Email is required.'\n        ],\n        lowercase: true\n    },\n    emailVerified: {\n        type: Boolean,\n        default: false\n    },\n    password: String,\n    phone: {\n        number: {\n            type: String\n        },\n        verified: {\n            type: Boolean,\n            default: false\n        }\n    }\n}, {\n    timestamps: true\n})\n\nuserSchema.pre('save', function (next){\n    const user = this;\n    bcrypt.genSalt(10, (error, salt) => {\n        if (error) return next(error);\n        bcrypt.hash(user.password, salt, null, (err, crypt) => {\n            if (err) return next(err);\n            user.password = crypt;\n            next();\n        })\n    })\n})\n\n// Make use of methods for comparedPassword\nuserSchema.methods.comparedPassword = function(p, cb){\n    bcrypt.compare(p, this.password, (err, good) => {\n        err?cb(err):cb(null, good);\n    })\n}\n\n// Export the model\nexport default mongoose.model('User', userSchema);"]}
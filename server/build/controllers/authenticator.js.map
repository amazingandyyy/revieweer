{"version":3,"sources":["../../src/controllers/authenticator.js"],"names":["signupWithEmail","req","res","next","email","body","findOne","then","user","origin","headers","tokenn","generateTokenWithEmail","deepLink","mailObj","to","subject","message","activationEmailTemplate","send","catch","err","verifyEmailToken","token","address","sendStatus","signup","password","firstName","lastName","params","existingUser","newUser","name","first","last","save","generateToken","savedUser","isAdmin","admin","list","indexOf","status","signin","comparedPassword","good","updateProfile","userId","_id","newProfile","findByIdAndUpdate","new"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;kBAEe;AACbA,mBAAiB,yBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QAC3BC,KAD2B,GACjBH,IAAII,IADa,CAC3BD,KAD2B;;AAElC,KAACA,KAAF,GAAUD,KAAK,yBAAL,CAAV,GACA,eAAKG,OAAL,CAAa;AACXF,aAAOA;AADI,KAAb,EAEGG,IAFH,CAEQ,gBAAQ;AACd,UAAIC,IAAJ,EAAU,OAAOL,KAAK,sBAAL,CAAP;AADI,UAENM,MAFM,GAEKR,IAAIS,OAFT,CAEND,MAFM;;AAGd,UAAME,SAAS,gBAAMC,sBAAN,CAA6BR,KAA7B,CAAf;AACA,UAAMS,WAAcJ,MAAd,mCAAkDE,MAAlD,iBAAoEP,KAA1E;AACA,UAAMU,UAAU;AACdC,YAAIX,KADU;AAEdY,iBAAS,4CAFK;AAGdC,iBAASC,wBAAwBL,QAAxB;AAHK,OAAhB;AAKA,oBAAIM,IAAJ,CAASL,OAAT,EAAkBP,IAAlB,CAAuB,iBAAO;AAC5BL,YAAIiB,IAAJ,CAAS,EAACf,YAAD,EAAT;AACD,OAFD,EAEGgB,KAFH,CAES,UAACC,GAAD,EAAO;AACdlB,aAAK,mBAAL;AACD,OAJD;AAKD,KAjBD,EAiBGiB,KAjBH,CAiBSjB,IAjBT,CADA;AAmBD,GAtBY;AAuBbmB,oBAAkB,0BAACrB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpC,oBAAMmB,gBAAN,CAAuBrB,IAAII,IAAJ,CAASkB,KAAhC,EAAuC,UAACF,GAAD,EAAMG,OAAN,EAAkB;AACvD,UAAIH,GAAJ,EAAS,OAAOnB,IAAIuB,UAAJ,CAAe,GAAf,CAAP;AACTvB,UAAIiB,IAAJ,CAASK,OAAT;AACD,KAHD;AAID,GA5BY;AA6BbE,UAAQ,gBAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,oBACuBF,IAAII,IAD3B;AAAA,QAClBD,KADkB,aAClBA,KADkB;AAAA,QACXuB,QADW,aACXA,QADW;AAAA,QACDC,SADC,aACDA,SADC;AAAA,QACUC,QADV,aACUA,QADV;;AAE1B,oBAAMP,gBAAN,CAAuBrB,IAAI6B,MAAJ,CAAWP,KAAlC,EAAyC,UAACF,GAAD,EAAMG,OAAN,EAAkB;AACzD,UAAIH,OAAQG,YAAYpB,KAApB,IAA+B,CAACA,KAAD,IAAU,CAACuB,QAA9C,EAAyD,OAAOzB,IAAIuB,UAAJ,CAAe,GAAf,CAAP;AACzD,qBACCnB,OADD,CACS,EAAEF,YAAF,EADT,EAECG,IAFD,CAEM,wBAAgB;AACpB,YAAIwB,YAAJ,EAAkB,OAAO5B,KAAK,qBAAL,CAAP;AAClB,YAAM6B,UAAU,mBAAS;AACvBC,gBAAM;AACJC,mBAAON,SADH;AAEJO,kBAAMN;AAFF,WADiB;AAKvBzB,sBALuB;AAMvBuB;AANuB,SAAT,CAAhB;;AASAK,gBAAQI,IAAR,GACC7B,IADD,CACM,qBAAa;AACjB,iBAAOL,IAAIiB,IAAJ,CAAS;AACdI,mBAAO,gBAAMc,aAAN,CAAoBC,SAApB,CADO;AAEdC,qBAAU,iBAAOC,KAAP,CAAaC,IAAb,CAAkBC,OAAlB,CAA0BJ,UAAUlC,KAApC,KAA4C,CAAC,CAFzC;AAGduC,oBAAQ;AAHM,WAAT,CAAP;AAKD,SAPD,EAQCvB,KARD,CAQOjB,IARP;AASD,OAtBD,EAuBCiB,KAvBD,CAuBOjB,IAvBP;AAwBD,KA1BD;AA2BD,GA1DY;;AA4DbyC,UAAQ,gBAAC3C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,qBACEF,IAAII,IADN;AAAA,QAClBD,KADkB,cAClBA,KADkB;AAAA,QACXuB,QADW,cACXA,QADW;;AAEzB,KAACvB,KAAD,IAAU,CAACuB,QAAZ,GAAsBxB,KAAK,qCAAL,CAAtB,GACE,eAAKG,OAAL,CAAa,EAAEF,YAAF,EAAb,EACCG,IADD,CACM,gBAAQ;AACZ,UAAG,CAACC,IAAJ,EAAS,OAAOL,KAAK,uBAAL,CAAP;AACTK,WAAKqC,gBAAL,CAAsBlB,QAAtB,EAAgC,UAACN,GAAD,EAAMyB,IAAN,EAAe;AAC5CzB,eAAO,CAACyB,IAAT,GAAe3C,KAAKkB,OAAO,2BAAZ,CAAf,GACAnB,IAAIiB,IAAJ,CAAS,EAACI,OAAO,gBAAMc,aAAN,CAAoB7B,IAApB,CAAR,EAAmC+B,SAAU,iBAAOC,KAAP,CAAaC,IAAb,CAAkBC,OAAlB,CAA0BlC,KAAKJ,KAA/B,KAAuC,CAAC,CAArF,EAAT,CADA;AAED,OAHD;AAID,KAPD,EAOGgB,KAPH,CAOSjB,IAPT,CADF;AASD,GAvEY;;AAyEb4C,iBAAe,uBAAC9C,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACjCF,QAAIO,IAAJ,CAASqC,gBAAT,CAA0B5C,IAAII,IAAJ,CAASsB,QAAnC,EAA6C,UAACN,GAAD,EAAMyB,IAAN,EAAe;AAC1D,UAAIzB,GAAJ,EAAS,OAAOlB,KAAKkB,GAAL,CAAP;AACT,UAAI,CAACyB,IAAL,EAAW,OAAO3C,KAAK,kBAAL,CAAP;;AAEX,UAAM6C,SAAS/C,IAAIO,IAAJ,CAASyC,GAAxB;AACA,UAAMC,aAAa;AACjBjB,cAAM;AACJC,iBAAOjC,IAAII,IAAJ,CAASuB,SADZ;AAEJO,gBAAMlC,IAAII,IAAJ,CAASwB;AAFX;AADW,OAAnB;AAMA,aAAOqB,WAAWvB,QAAlB;;AAEA,qBAAKwB,iBAAL,CAAuBH,MAAvB,EAA+BE,UAA/B,EAA2C,EAAEE,KAAK,IAAP,EAA3C,EACC7C,IADD,CACM;AAAA,eAAWL,IAAIuB,UAAJ,CAAe,GAAf,CAAX;AAAA,OADN,EAECL,KAFD,CAEOjB,IAFP;AAGD,KAhBD;AAiBD;;AA3FY,C;;;AA+Ff,IAAMe,0BAA0B,SAA1BA,uBAA0B,CAACL,QAAD,EAAc;AAC5C,uPAMWA,QANX,6BAMwCA,QANxC;AA6BD,CA9BD","file":"authenticator.js","sourcesContent":["import {token, SES} from '../services';\nimport User from '../models/user';\nimport config from '../config';\n\nexport default {\n  signupWithEmail: (req, res, next) => {\n    const { email } = req.body;\n    (!email)? next('You Must Provide Email.'):\n    User.findOne({\n      email: email\n    }).then(user => {\n      if (user) return next('403:Email is in use.');\n      const { origin } = req.headers;\n      const tokenn = token.generateTokenWithEmail(email);\n      const deepLink = `${origin}/#signupVerification?token=${tokenn}&address=${email}`;\n      const mailObj = {\n        to: email,\n        subject: '[Revieweer]Welcome and Account Activation.',\n        message: activationEmailTemplate(deepLink)\n      };\n      SES.send(mailObj).then(email=>{\n        res.send({email});\n      }).catch((err)=>{\n        next('500:Email is bad.')\n      });\n    }).catch(next);\n  },\n  verifyEmailToken: (req, res, next) => {\n    token.verifyEmailToken(req.body.token, (err, address) => {\n      if (err) return res.sendStatus(401);\n      res.send(address);\n    })\n  },\n  signup: (req, res, next) => {\n    const { email, password, firstName, lastName } = req.body;\n    token.verifyEmailToken(req.params.token, (err, address) => {\n      if (err || (address !== email) || (!email || !password)) return res.sendStatus(401);\n      User\n      .findOne({ email })\n      .then(existingUser => {\n        if (existingUser) return next('422:Email is in use');\n        const newUser = new User({\n          name: {\n            first: firstName,\n            last: lastName\n          },\n          email,\n          password\n        })\n        \n        newUser.save()\n        .then(savedUser => {\n          return res.send({\n            token: token.generateToken(savedUser), \n            isAdmin: (config.admin.list.indexOf(savedUser.email)!=-1),\n            status: true\n          })\n        })\n        .catch(next);\n      })\n      .catch(next);\n    })\n  },\n\n  signin: (req, res, next) => {\n    const { email, password } = req.body;\n    (!email || !password)?next('You Must Provide Email And Password'):\n      User.findOne({ email })\n      .then(user => {\n        if(!user)return next('404:User Is Not Found');\n        user.comparedPassword(password, (err, good) => {\n          (err || !good)?next(err || '403:Password Is Incorrect'):\n          res.send({token: token.generateToken(user), isAdmin: (config.admin.list.indexOf(user.email)!=-1)});\n        })\n      }).catch(next)\n  },\n\n  updateProfile: (req, res, next) => {\n    req.user.comparedPassword(req.body.password, (err, good) => {\n      if (err) return next(err);\n      if (!good) return next('401:Bad Password');\n      \n      const userId = req.user._id;\n      const newProfile = {\n        name: {\n          first: req.body.firstName,\n          last: req.body.lastName\n        }\n      };\n      delete newProfile.password;\n\n      User.findByIdAndUpdate(userId, newProfile, { new: true })\n      .then(newUser => res.sendStatus(200))\n      .catch(next)\n    })\n  }\n\n}\n\nconst activationEmailTemplate = (deepLink) => {\n  return `<b>Welcome to Revieweer,</b>\n  <br/>\n  <br/>\n  If you requested this activation, please go to the following URL to confirm this email and continue to use this email address as your account username,\n  <br/>\n  <br/>\n  <a href='${deepLink}' target='_blank'>${deepLink}</a>\n  <br/> \n  <br/> \n  <p>--------------</p>\n  <br/> \n  Enjoy the benefits of being a revieweer:\n  <br/>\n  <ul>\n    <li><b>Explore:</b> explore new products to try.</li>\n    <li><b>Review:</b> amazing review with photo to help business grow</li>\n    <li><b>Earn:</b> we pay you up to 100% cashback + cash rewards</li>\n  </ul>\n  <br/>\n  We are looking forward to <b>your experience</b>. \n  <br/>\n  Please feel free to reply this email or reach out to us via team@revieweer.com anytime.\n  <br/>\n  <br/>\n  <br/>\n  Regards,\n  <br/>\n  <b>The Revieweer team</b>\n  `\n}"]}
{"version":3,"sources":["../src/server.js"],"names":["app","config","sentryDSN","install","use","requestHandler","connect","mongoose","uri","catch","console","error","err","Promise","global","json","urlencoded","extended","errorHandler","process","env","NODE_ENV","static","resolve","__dirname","get","req","res","sendFile","join","next","log","search","split","length","statusCode","msg","headersSent","status","send","port","PORT","listen"],"mappings":";;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,gBAAMC,MAAN,CAAa,iBAAOC,SAApB,EAA+BC,OAA/B;AACAH,IAAII,GAAJ,CAAQ,gBAAMC,cAAN,EAAR;;AAEA;AACA,mBAASC,OAAT,CAAiB,iBAAOC,QAAP,CAAgBC,GAAjC,EACCC,KADD,CACO;AAAA,WAAKC,QAAQC,KAAR,CAAcC,GAAd,CAAL;AAAA,CADP;;AAGA,mBAASC,OAAT,GAAmBC,OAAOD,OAA1B;;AAEA;AACAb,IAAII,GAAJ,CAAQ,qBAAR;AACAJ,IAAII,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAJ,IAAII,GAAJ,CAAQ,qBAAWW,IAAX,EAAR;AACAf,IAAII,GAAJ,CAAQ,qBAAWY,UAAX,CAAsB,EAACC,UAAU,IAAX,EAAtB,CAAR;AACAjB,IAAII,GAAJ,CAAQ,GAAR;AACAJ,IAAII,GAAJ,CAAQc,YAAR;AACA,IAAGC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,YAA3B,EAAwC;AACpCrB,QAAII,GAAJ,CAAQ,kBAAQkB,MAAR,CAAe,eAAKC,OAAL,CAAaC,SAAb,EAAwB,YAAxB,CAAf,CAAR;AACAxB,QAAIyB,GAAJ,CAAQ,IAAR,EAAc,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC9BA,YAAIC,QAAJ,CAAa,eAAKC,IAAL,CAAU,YAAV,CAAb;AACH,KAFD;AAGH;;AAED,SAASX,YAAT,CAAuBN,GAAvB,EAA4Bc,GAA5B,EAAiCC,GAAjC,EAAsCG,IAAtC,EAA4C;AACxCpB,YAAQqB,GAAR,CAAY,QAAZ,EAAsBnB,GAAtB;AACA,QAAMD,QAAU,OAAOC,GAAR,IAAgB,QAAhB,IAA4BA,IAAIoB,MAAJ,CAAW,GAAX,IAAgB,CAA7C,GAAgDpB,IAAIqB,KAAJ,CAAU,GAAV,CAAhD,GAA+DrB,GAA7E;;AAFwC,eAGfD,MAAMuB,MAAN,GAAe,CAAhB,GAAmBvB,KAAnB,GAAyB,CAAC,GAAD,EAAMC,GAAN,CAHT;AAAA;AAAA,QAGnCuB,UAHmC;AAAA,QAGvBC,GAHuB;;AAIvCT,QAAIU,WAAL,GAAkBP,KAAKM,GAAL,CAAlB,GAA4BT,IAAIW,MAAJ,CAAWH,UAAX,EAAuBI,IAAvB,CAA4BH,GAA5B,CAA5B;AACH;AACDpC,IAAII,GAAJ,CAAQ,gBAAMc,YAAN,EAAR;;AAEA;AACA,IAAMsB,OAAOrB,QAAQC,GAAR,CAAYqB,IAAZ,IAAoB,IAAjC;AACA,wBAAazC,GAAb,EAAkB0C,MAAlB,CAAyBF,IAAzB,EAA+B,YAAI;AAC/B9B,YAAQqB,GAAR,wCAAiDS,IAAjD;AACH,CAFD","file":"server.js","sourcesContent":["import express from 'express';\nimport {createServer} from 'http';\nimport bodyParser from 'body-parser';\nimport morgan from 'morgan';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport Raven from 'raven';\nimport path from 'path';\n\nimport routers from './routers';\nimport config from './config';\n\nconst app = express();\nRaven.config(config.sentryDSN).install();\napp.use(Raven.requestHandler());\n\n// DB Setup\nmongoose.connect(config.mongoose.uri)\n.catch(err=>console.error(err));\n\nmongoose.Promise = global.Promise;\n\n// App Setup\napp.use(cors());\napp.use(morgan('dev'));\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({extended: true}));\napp.use('/', routers);\napp.use(errorHandler);\nif(process.env.NODE_ENV == 'production'){\n    app.use(express.static(path.resolve(__dirname, '../../docs')));\n    app.get('/*', function (req, res) {\n        res.sendFile(path.join('index.html'));\n    });\n}\n\nfunction errorHandler (err, req, res, next) {\n    console.log('errrrr', err)\n    const error = ((typeof err) == 'string' && err.search(':')>0)?err.split(':'):err;\n    let [statusCode, msg] = (error.length > 1)?error:[500, err];\n    (res.headersSent)?next(msg):res.status(statusCode).send(msg);\n}\napp.use(Raven.errorHandler());\n\n// Server Setup\nconst port = process.env.PORT || 8000;\ncreateServer(app).listen(port, ()=>{\n    console.log(`\\x1b[32m`, `> Server listening on ${port}`, `\\x1b[0m`)\n});\n"]}
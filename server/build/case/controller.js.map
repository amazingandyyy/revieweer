{"version":3,"sources":["../../src/case/controller.js"],"names":["startOne","req","res","next","productId","query","findOne","user","_id","product","then","c","create","progress","payload","viewed","send","catch","findByIdAndUpdate","$inc","fetchOne","caseId"],"mappings":";;;;;;AAAA;;;;AACA;;;;kBAEe;AACbA,YAAU,kBAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QACrBC,SADqB,GACRH,IAAII,KADI,CACrBD,SADqB;;AAE5B,QAAG,CAACA,SAAJ,EAAe,OAAOD,KAAK,kBAAL,CAAP;AACf,oBAAKG,OAAL,CAAa;AACXC,YAAMN,IAAIM,IAAJ,CAASC,GADJ;AAEXC,eAASL;AAFE,KAAb,EAICM,IAJD,CAIM,aAAG;AACP,UAAG,CAACC,CAAJ,EAAM;AACJ;AACA;AACA,wBAAKC,MAAL,CAAY;AACVL,gBAAMN,IAAIM,IAAJ,CAASC,GADL;AAEVC,mBAASL,SAFC;AAGVS,oBAAU,yBAAe,QAAf,CAHA;AAIVC,mBAAS;AACPC,oBAAQ;AADD;AAJC,SAAZ,EAOGL,IAPH,CAOQ,aAAG;AACT,iBAAOR,IAAIc,IAAJ,CAASL,EAAEH,GAAX,CAAP;AACD,SATD,EASGS,KATH,CASSd,IATT;AAUD,OAbD,MAaK;AACH;AACA,YAAGQ,EAAEE,QAAF,IAAc,yBAAe,QAAf,CAAjB,EAA0C;AACxC;AACA;AACA,0BAAKK,iBAAL,CAAuBP,EAAEH,GAAzB,EAA8B;AAC5BW,kBAAO,EAAE,kBAAmB,CAArB;AADqB,WAA9B,EAEGT,IAFH,CAEQ,UAACC,CAAD,EAAK;AACXT,gBAAIc,IAAJ,CAASL,EAAEH,GAAX;AACD,WAJD;AAKD;AACF;AACF,KA9BD,EA+BCS,KA/BD,CA+BOd,IA/BP;AAgCD,GApCY;AAqCbiB,YAAU,kBAACnB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA,QACrBkB,MADqB,GACXpB,IAAII,KADO,CACrBgB,MADqB;;AAE5B,QAAG,CAACA,MAAJ,EAAY,OAAOlB,KAAK,eAAL,CAAP;AACZ,oBAAKG,OAAL,CAAa;AACXE,WAAKa,MADM;AAEXd,YAAMN,IAAIM,IAAJ,CAASC;AAFJ,KAAb,EAGGE,IAHH,CAGQ,aAAG;AACT,UAAGC,EAAEE,QAAF,IAAc,yBAAe,QAAf,CAAjB,EAA0C;AACxC,YAAG,CAACF,CAAJ,EAAM,OAAOR,KAAK,qBAAL,CAAP;AACN;AACA;AACA,wBAAKe,iBAAL,CAAuBP,EAAEH,GAAzB,EAA8B;AAC5BW,gBAAO,EAAE,kBAAmB,CAArB;AADqB,SAA9B,EAEGT,IAFH,CAEQ,UAACC,CAAD,EAAK;AACXT,cAAIc,IAAJ,CAASL,CAAT;AACD,SAJD;AAKD;AACF,KAdD,EAeCM,KAfD,CAeOd,IAfP;AAgBD;;AAIH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAzEe,C","file":"controller.js","sourcesContent":["import Case from './model';\nimport {progressStatus} from './progress';\n\nexport default {\n  startOne: (req, res, next) => {\n    const {productId} = req.query;\n    if(!productId) return next('403:No productId');\n    Case.findOne({\n      user: req.user._id,\n      product: productId\n    })\n    .then(c=>{\n      if(!c){\n        // the first visit\n        // create case\n        Case.create({\n          user: req.user._id,\n          product: productId,\n          progress: progressStatus['viewed'],\n          payload: {\n            viewed: 1\n          }\n        }).then(c=>{\n          return res.send(c._id);\n        }).catch(next)\n      }else{\n        // not the first visit AND not started yet\n        if(c.progress == progressStatus['viewed']){\n          // update viewing counts\n          // in order to analyze how many times users check but not yet start.\n          Case.findByIdAndUpdate(c._id, {\n            $inc : { 'payload.viewed' : 1 }\n          }).then((c)=>{\n            res.send(c._id);\n          })\n        }\n      }\n    })\n    .catch(next)\n  },\n  fetchOne: (req, res, next) => {\n    const {caseId} = req.query;\n    if(!caseId) return next('403:No caseId');\n    Case.findOne({\n      _id: caseId,\n      user: req.user._id\n    }).then(c=>{\n      if(c.progress == progressStatus['viewed']){\n        if(!c)return next('500:No Case For You')\n        // update viewing counts\n        // in order to analyze how many times users check but not yet start.\n        Case.findByIdAndUpdate(c._id, {\n          $inc : { 'payload.viewed' : 1 }\n        }).then((c)=>{\n          res.send(c);\n        })\n      }\n    })\n    .catch(next)\n  }\n}\n\n\n// switch (type) {\n//   case progressStatus['started']:\n//     break;\n//   case progressStatus['ordered']:\n//     break;\n//   case progressStatus['reviewed']:\n//     break;\n//   case progressStatus['payouted']:\n//     break;\n//   case progressStatus['finished']:\n//     break; \n//   default:\n//     break;\n// }"]}